table;cols;origin;Description
PERSONS;person_id;CDM_PERSONS.person_id;unique person identifier.
PERSONS;day_of_birth;CDM_PERSONS.day_of_birth;If empty while year filled THEN inpute. If month missing impute 1 else impute 16
PERSONS;month_of_birth;CDM_PERSONS.month_of_birth;If empty while year filled THEN inpute 6
PERSONS;year_of_birth;CDM_PERSONS.year_of_birth;
PERSONS;day_of_death;CDM_PERSONS.day_of_death;If empty while year filled THEN inpute. If month missing impute 1 else impute 16
PERSONS;month_of_death;CDM_PERSONS.month_of_death;If empty while year filled THEN inpute 6
PERSONS;year_of_death;CDM_PERSONS.year_of_death;
PERSONS;sex_at_instance_creation;CDM_PERSONS.sex_at_instance_creation;
PERSONS;birth_date;Step_01_CreatePersons;Create date from day, month and year
PERSONS;death_date;Step_01_CreatePersons;Create date from day, month and year
PERSONS;YEAR_BIRTH;CDM_PERSONS.year_of_death;Get year from birth. If invalid date combination it is filled with NA and subject is excluded in Step_04b_CreateStudyPopulation
INPUTED;person_id;CDM_PERSONS.person_id;unique person identifier
INPUTED;inputed_birth_day;Step_01_CreatePersons;If cell inputed TRUE
INPUTED;inputed_birth_month;Step_01_CreatePersons;If cell inputed TRUE
INPUTED;inputed_death_day;Step_01_CreatePersons;If cell inputed TRUE
INPUTED;inputed_death_month;Step_01_CreatePersons;If cell inputed TRUE
OBS_SPELLS;person_id;CDM_OBSERVATION_PERIODS.person_id; Only persons imported that have a op_start_date as not empty
OBS_SPELLS;num_spell;CreateSpells;Generated by function CreateSpells
OBS_SPELLS;op_start_date;CDM_OBSERVATION_PERIODS.op_start_date;(1) Changed op_start_date after merge by function CreateSpells with 365 days allowed gap (2) op_start_date < birth_date, op_start_date := birth_date. (3) 
OBS_SPELLS;op_end_date;CDM_OBSERVATION_PERIODS.op_end_date;(1) Changed op_end_date after merge by function CreateSpells with 365 days allowed gap. (2) op_end_date > death_date, op_end_date := death_date. (3) op_end_date := min(end_study_date,op_end_date,date_creation,recommended_end_date)
OBS_SPELLS;birth_date;PERSONS.birth_date;PERSONS.birth_date
OBS_SPELLS;death_date;PERSONS.death_date;PERSONS.death_date
CoV;person_id;CDM_VACCINES.person_id;Only the rows are imported that are in the table PERSONS.rds. These subjects are stored in the variable PERSONS_OF_INTEREST0
CoV;vx_atc;CDM_VACCINES.vx.atc;Only rows with an ATC code that refers to covid vaccination according to the input file VAC4EU PASS CovidVaccineMonitoringVariables-3 are selected using the function CreateConceptDatasets
CoV;vx_manufacturer;CDM_VACCINES.vx_manufacturer;
CoV;Date;CDM_VACCINES.vx_admin_date, CDM_VACCINES.vx.record_date;fifelse(is.na(vx_admin_date),vx_record_date,vx_admin_date) MEANING that if vx_admin_date is not filled the vx_record_date is used
CoV;voc;Step_03_GetVaccins;Variable created becuase the used function CreateConceptDatasets needs a category column
CoV;vx_atc_2;CoV.vx.atc;dot removed 
CoV;code3;VAC4EU PASS CovidVaccineMonitoringVariables-3.3-lettercode;
INF;person_id;CDM_VACCINES.person_id;Only the rows are imported that are in the table PERSONS.rds. These subjects are stored in the variable PERSONS_OF_INTEREST0
INF;vx_atc;CDM_VACCINES.vx.atc;Only rows with an ATC code that refers to covid vaccination according to the input file VAC4EU PASS CovidVaccineMonitoringVariables-3 are selected using the function CreateConceptDatasets
INF;vx_manufacturer;CDM_VACCINES.vx_manufacturer;
INF;Date;CDM_VACCINES.start_date_record;
INF;voc;Step_03_GetVaccins;fifelse(is.na(vx_admin_date),vx_record_date,vx_admin_date) MEANING that if vx_admin_date is not filled the vx_record_date is used
INF;vx_atc_2;CoV.vx.atc;
INF;code3;VAC4EU PASS CovidVaccineMonitoringVariables-3.3-lettercode;
CoV2;person_id;CoV.person_id;Cases selected after applience of function CleanOutcomes with an allowed gap of 14 days
CoV2;Date;CoV.Date;
CoV2;vx_manufacturer;CoV.vx_manufacturer;
CoV2;NB;Step_04_CreateVariablesCovidVaccins;Sequence number by person_id on vaccination date
PERSONS1;person_id;PERSONS.person_id;
PERSONS1;death_date;PERSONS.death_date;
PERSONS1;YEAR_BIRTH;PERSONS.YEAR_BIRTH;
PERSONS1;FIRST_OTHER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;FIRST_PFIZER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;SECOND_OTHER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;SECOND_PFIZER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;THIRD_OTHER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;THIRD_PFIZER;CoV.Date, CoV.vx_manufacturer;"(1) Clean covid vaccins with function CleanOutcomes with an allowed gap of 14 days. (2) Add a sequence number by person_id ordered by Date. (3) Remove instance 4 and higher. (4) Determine manuvactuer using fifelse(like(vx_manufacturer, ""pfizer"", ignore.case = T ),""PFIZER"",""OTHER""). (5) Concatenate instance and manufactuer. (6) Transpose with the concatenated result as new column names"
PERSONS1;month_t0;Step_04_CreateVariablesCovidVaccins;"Concatenate year|| month from FIRST_PFIZER R code -> paste0(sprintf(""%02d"",month(FIRST_PFIZER)),""-"",year(FIRST_PFIZER))"
PERSONS1;day_of_birth;PERSONS.day_of_birth;
PERSONS1;month_of_birth;PERSONS.month_of_birth;
PERSONS1;year_of_birth;PERSONS.year_of_birth;
PERSONS1;day_of_death;PERSONS.day_of_death;
PERSONS1;month_of_death;PERSONS.month_of_death;
PERSONS1;year_of_death;PERSONS.year_of_death;
PERSONS1;sex_at_instance_creation;PERSONS.sex_at_instance_creation;
PERSONS1;birth_date;PERSONS.birth_date;
PERSONS2;person_id;PERSONS1.person_id;Only the PERSONS after applience of the objects FirstExclusionPersons and FirstExclusionSpells as an input for the function Flowchart. These subjects are stored in the variable PERSONS_OF_INTEREST1
PERSONS2;THIRD_OTHER;PERSONS1.THIRD_OTHER;
PERSONS2;THIRD_PFIZER;PERSONS1.THIRD_PFIZER;
PERSONS2;month_t0;PERSONS1.month_t0;
PERSONS2;sex_at_instance_creation;PERSONS1.sex_at_instance_creation;
PERSONS2;birth_date;PERSONS1.birth_date;
PERSONS2;death_date;PERSONS1.death_date;
PERSONS2;YEAR_BIRTH;PERSONS1.YEAR_BIRTH;
PERSONS2;FIRST_OTHER;PERSONS1.FIRST_OTHER;
PERSONS2;FIRST_PFIZER;PERSONS1.FIRST_PFIZER;
PERSONS2;SECOND_OTHER;PERSONS1.SECOND_OTHER;
PERSONS2;SECOND_PFIZER;PERSONS1.SECOND_PFIZER;
OBS_SPELLS1;person_id;OBS_SPELLS.person_id;Only the SPELLS after applience of the object FirstExclusionSpells. These subjects are stored in the variable PERSONS_OF_INTEREST1 and this variable is used to select the needed persons for PERSONS2
OBS_SPELLS1;num_spell;OBS_SPELLS.num_spell;IF Used_spell_exposed TRUE THEN row is doubled and num_spell is recalculated
OBS_SPELLS1;op_start_date;OBS_SPELLS.op_start_date;IF Used_spell_exposed TRUE THEN row is doubled and op_start_date is recalculated with FIRST_PFIZER, Used_spell_exposed = FALSE THEN op_start_date := op_start_date + 365
OBS_SPELLS1;op_end_date;OBS_SPELLS.op_end_date;IF Used_spell_exposed TRUE THEN row is doubled and op_end_date is recalculated with FIRST_PFIZER - 1
OBS_SPELLS1;birth_date;PERSONS1.birth_date;
OBS_SPELLS1;death_date;PERSONS1.death_date;
OBS_SPELLS1;FIRST_PFIZER;PERSONS1.FIRST_PFIZER;
OBS_SPELLS1;Used_spell_exposed;Step_04b_CreateStudyPopulation;IF FIRST_PFIZER BETWEEN op_start_date AND op_end_date THEN TRUE ELSE FALSE
COVID19DX;person_id;EVENTS.person_id;(1) Only cases with a date after 20201101 and before end_study_date are imported (2) Only rows with an event code that refers to COVID19DX  according to the input files Pfizer_full_codelist.csv and  Pfizer_additional_MO_SO.csv are selected using the function CreateConceptDatasets
COVID19DX;Date;EVENTS.start_date_record;
COVID19DX;Code;EVENTS.event_code;
COVID19DX;Voc;EVENTS.event_record_vocabulary;
COVID19DX;Code_2;COVID19DX.Code;No dot
COVID19DX;event_abbreviation;Pfizer_full_codelist.event_abbreviation/Pfizer_additional_MO_SO.event_abbreviation;
PERSONS3;person_id;PERS;
PERSONS3;THIRD_OTHER;PERSONS2.THIRD_OTHER;
PERSONS3;THIRD_PFIZER;PERSONS2.THIRD_PFIZER;
PERSONS3;month_t0;PERSONS2.month_t0;
PERSONS3;FIRST_COV_INF;COVID19DX.Date;Order on date by person_id and get first in time. Merge dates to persons2 on person_id -> setorder(COVID, person_id, Date) COVID <- COVID[,NB := seq_len(.N) , by = person_id][NB == 1,]
PERSONS3;sex_at_instance_creation;PERSONS2.sex_at_instance_creation;
PERSONS3;birth_date;PERSONS2.birth_date;
PERSONS3;death_date;PERSONS2.death_date;
PERSONS3;YEAR_BIRTH;PERSONS2.YEAR_BIRTH;
PERSONS3;FIRST_OTHER;PERSONS2.FIRST_OTHER;
PERSONS3;FIRST_PFIZER;PERSONS2.FIRST_PFIZER;
PERSONS3;SECOND_OTHER;PERSONS2.SECOND_OTHER;
PERSONS3;SECOND_PFIZER;PERSONS2.SECOND_PFIZER;
EXPOSED;person_id;PERSONS3.person_id;
EXPOSED;REGION;MATCHING.REGION;This column contains the region that was the last one prior to month_t0. If that is not available it is filled with the first one after month_t0 measured from the first of the month. This approach is used in the same way in the matching script.
EXPOSED;INFP5_2;Step_08_PrepareExposedControls;fifelse(INF5 < FIRST_PFIZER,T, F, na = F)] WARNING if changing this expression also the expressions in the matching need to be changed accordingly
EXPOSED;INFP5;MATCHING.INFP5;This column contains a date that is the minimum date of the minimum date within a month over the months 5 year prior starting on the month_t0 . This approach is used in the same way in the matching script.
EXPOSED;FIRST_COV_INF_2;Step_08_PrepareExposedControls;fifelse(FIRST_COV_INF < FIRST_PFIZER,T, F, na = F)] WARNING if changing this expression also the expressions in the matching need to be changed accordingly
EXPOSED;sex_at_instance_creation;PERSONS3.sex_at_instance_creation;
EXPOSED;FIRST_PFIZER;PERSONS3.FIRST_PFIZER;
EXPOSED;FIRST_OTHER;PERSONS3.FIRST_OTHER;
EXPOSED;YEAR_BIRTH;PERSONS3.YEAR_BIRTH;
EXPOSED;month_t0;PERSONS3.month_t0;
EXPOSED;FIRST_COV_INF;PERSON3.FIRST_COV_INF;This column contains the minimum known date
EXPOSED;op_start_date;OBS_SPELLS1.op_start_date;
EXPOSED;op_end_date;OBS_SPELLS1.op_end_date;
CONTROL;person_id;PERSONS3.person_id;
CONTROL;sex_at_instance_creation;PERSONS3.sex_at_instance_creation;
CONTROL;YEAR_BIRTH;PERSONS3.YEAR_BIRTH;
CONTROL;FIRST_COV_INF;PERSONS3.FIRST_COVID_INF;This column contains the minimum known date
CONTROL;VAC_DATE1;PERSONS3.FIRST_PFIZER/FIRST_OTHER;fifelse(!is.na(FIRST_PFIZER),FIRST_PFIZER,FIRST_OTHER) ][, FIRST_PFIZER := NULL ][, FIRST_OTHER := NULL ]
MATCH_PAIRS;Exposed;EXPOSED.person_id;
MATCH_PAIRS;Control;CONTROL.person_id;
MATCH_PAIRS;T0;EXPOSED.FIRST_PFIZER;
MATCH_PAIRS;REGION;EXPOSED.REGION;
MATCH_PAIRS;INFP5;EXPOSED.INFP5_2;
MATCH_PAIRS;FIRST_COV_INF;EXPOSED.FIRST_COV_INF_2;
MATCH_PAIRS;id;Step_09_MatchingProcedure;every matched pair is given an unique ID
MATCH_PAIRS;nb_match;Step_09_MatchingProcedure;for every exposed subject the number of control subjects where the sample is taken from is calculated
M_Studycohort;AGE_T0;Step_10_CombineExposedControl;"floor(time_length(interval(birth_date, T0),""year"")"
M_Studycohort;THIRD_PFIZER;PERSONS3.THIRD_PFIZER;
M_Studycohort;INFP5;MATCH_PAIRS.INFP5;
M_Studycohort;FIRST_COV_INF;MATCH_PAIRS.FIRST_COV_INF;
M_Studycohort;nb_match;MATCH_PAIRS.nb_match;
M_Studycohort;id;MATCH_PAIRS.id;
M_Studycohort;T0;MATCH_PAIRS.T0;
M_Studycohort;group;Step_10_CombineExposedControl;"If from CONTROL then ""Control"", If from EXPOSED then ""Exposed"", if(NA) AND if ""Control"" then ""UNMATHED"""
M_Studycohort;band;Step_10_CombineExposedControl;Use function CreateBands and merge result on AGE_T0
M_Studycohort;op_start_date;OBS_SPELLS.op_start_date;
M_Studycohort;op_end_date;OBS_SPELLS.op_end_date;
M_Studycohort;person_id;MATCH_PAIRS.Exposed, MATCH_PAIRS.Control;
M_Studycohort;sex_at_instance_creation;PERSONS3.sex_at_instance_creation;
M_Studycohort;birth_date;PERSONS3.birth_date;
M_Studycohort;FIRST_OTHER;PERSONS3.FIRST_OTHER;
M_Studycohort;SECOND_OTHER;PERSONS3.SECOND_OTHER;
M_Studycohort;THIRD_OTHER;PERSONS3.THIRD_OTHER;
M_Studycohort;FIRST_PFIZER;PERSONS3.FIRST_PFIZER;
M_Studycohort;SECOND_PFIZER;PERSONS3.SECOND_PFIZER;
M_Studycohort2;person_id;M_Studycohort.person_id;
M_Studycohort2;SECOND_PFIZER;M_Studycohort.SECOND_PFIZER;
M_Studycohort2;THIRD_PFIZER;M_Studycohort.THIRD_PFIZER;
M_Studycohort2;INFP5;M_Studycohort.INFP5;
M_Studycohort2;FIRST_COV_INF;M_Studycohort.FIRST_COV_INF;
M_Studycohort2;nb_match;M_Studycohort.nb_match;
M_Studycohort2;T0;M_Studycohort.T0;
M_Studycohort2;group;M_Studycohort.group;
M_Studycohort2;band;M_Studycohort.band;
M_Studycohort2;op_start_date;M_Studycohort.op_start_date;
M_Studycohort2;op_end_date;M_Studycohort.op_end_date;
M_Studycohort2;id;M_Studycohort.id;
M_Studycohort2;COAGDEF;Concept name.Date in SQLite database/Pfizer_full_codelist.event_abbreviation;Join dates on person_id and BETWEEN(T0 and 20 years prior to T0). Keep only the max() which is nearest to T0
M_Studycohort2;AGE_T0;M_Studycohort.AGE_T0;
M_Studycohort2;birth_date;M_Studycohort.id;
M_Studycohort2;FIRST_OTHER;M_Studycohort.FIRST_OTHER;
M_Studycohort2;SECOND_OTHER;M_Studycohort.SECOND_OTHER;
M_Studycohort2;THIRD_OTHER;M_Studycohort.THIRD_OTHER;
M_Studycohort2;FIRST_PFIZER;M_Studycohort.FIRST_PFIZER;
M_Studycohort3;person_id;M_Studycohort2.person_id;
M_Studycohort3;SECOND_PFIZER;M_Studycohort2.SECOND_PFIZER;
M_Studycohort3;THIRD_PFIZER;M_Studycohort2.THIRD_PFIZER;
M_Studycohort3;INFP5;M_Studycohort2.INFP5;
M_Studycohort3;FIRST_COV_INF;M_Studycohort2.FIRST_COV_INF;
M_Studycohort3;nb_match;M_Studycohort2.nb_match;
M_Studycohort3;T0;M_Studycohort2.T0;
M_Studycohort3;group;M_Studycohort2.group;
M_Studycohort3;band;M_Studycohort2.band;
M_Studycohort3;op_start_date;M_Studycohort2.op_start_date;
M_Studycohort3;op_end_date;M_Studycohort2.op_end_date;
M_Studycohort3;id;M_Studycohort2.id;
M_Studycohort3;AGE_T0;M_Studycohort2.AGE_T0;
M_Studycohort3;sex_at_instance_creation;M_Studycohort2.sex_at_instance_creation;
M_Studycohort3;birth_date;M_Studycohort2.birth_date;
M_Studycohort3;FIRST_OTHER;M_Studycohort2.FIRST_OTHER;
M_Studycohort3;SECOND_OTHER;M_Studycohort2.SECOND_OTHER;
M_Studycohort3;THIRD_OTHER;M_Studycohort2.THIRD_OTHER;
M_Studycohort3;FIRST_PFIZER;M_Studycohort2.FIRST_PFIZER;
M_Studycohort3;GESTDIAB_COUNT;Concept name.Date in SQLite database/Pfizer_full_codelist.event_abbreviation;Join dates on person_id and BETWEEN(T0 and op_end_date). Keep only the min() which is nearest to T0
M_Studycohort3;GESTDIAB_HIST;Concept name.Date in SQLite database/Pfizer_full_codelist.event_abbreviation;Join dates on person_id and BETWEEN(T0 and 5 years prior to T0). Keep only the max() which is nearest to T0
